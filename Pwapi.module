<?php



class Pwapi extends WireData implements Module {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(

			// The module'ss title, typically a little more descriptive than the class name
			'title' => 'PW api for angularjs', 

			// version number 
			'version' => 0.1, 

			// summary is brief description of what this module is
			'summary' => 'a clean way to use angularjs + API to use PW in javascript',
			
			// Optional URL to more information about the module
			'href' => 'http://processwire.com',

			// singular=true: indicates that only one instance of the module is allowed.
			// This is usually what you want for modules that attach hooks. 
			'singular' => true, 

			// autoload=true: indicates the module should be started with ProcessWire.
			// This is necessary for any modules that attach runtime hooks, otherwise those
			// hooks won't get attached unless some other code calls the module on it's own.
			// Note that autoload modules are almost always also 'singular' (seen above).
			'autoload' => true, 
		
			// Optional font-awesome icon name, minus the 'fa-' part
			'icon' => 'smile-o', 
			);
	}

	/**
	 * Initialize the module
	 *
	 * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
	 * when ProcessWire's API is ready. As a result, this is a good place to attach hooks. 
	 *
	 */
	public function init() {

		    
		
		// registerUser( $name, $email, $email2, $password, $password2 )		comprueba que no sea robot

        $this->addHook('ProcessPageView::pageNotFound', $this, 'webService');   

	}



	public function webService($event) {


		// Check if asking for a web service
        $url = $event->arguments('url');
        if ($url != '/pwapi/') return; //Let pageNotFound() handle it
		header($_SERVER['SERVER_PROTOCOL'] . ' 200 OK', true, 200);

		// Get post Data
		$request = file_get_contents('php://input');
		$getPost = json_decode($request,true);
		$service = $getPost['do'];
		$d = $getPost['data'];

		switch ($service) {

		    // $http.post('http://ip/web-service/', {action: 'getPage', pageId: 1046 })
		    case "prueba": $event->return = $this->prueba($d["prueba"],$d["prueba2"]); break;	

		    // $http.post('http://ip/web-service/', {action: 'getPage', pageId: 1046 })
		    case "sendEmail":									
				$event->return = $this->sendEmail( $d["from"], $d["to"], $d["subject"], $d["message"] );
		        break;	
		    
		    // registerUser( $name, $email, $email2, $password, $password2 )    
		    case "registerUser":									
				$event->return =$this->registerUser($d["name"], $d["email"], $d["email2"], $d["password"], $d["password2"]);
		        break;	

	    	default: echo "el servicio no existe"; 
		}


	}	


	protected function prueba( $prueba, $prueba2 ){

		return $prueba. $prueba2;

	}


	/**
	 * NEEDS wireMail SMTP module to be installed and configured
	 */
	protected function sendEmail( $from, $to, $subject, $message ){
			$mail = wireMail();
			$mail->to($to)->from($from); // all calls can be chained
			$mail->subject($subject); 
			// $mail->body($message);
			$mail->bodyHTML($message); 
			$mail->send(); 
			return json_encode( ["from" => $from, "to" => $to, "subject" => $subject, "message" => $message,] );
	}

	/**
	 * MEJORAS: si el nombre existe -> poner el email purificado, HECHO
	 * 
	 * Crea un nuevo usuario en PW, es necesario que el formulario contenga:
	 * <input type="text" name="email2" id="email2" ng-model="userData.email2">
	 * <style type="text/css">#email2 { display: none; }</style>
	 * 
	 * @param  [type] $name      [description]
	 * @param  [type] $email     [description]
	 * @param  [type] $email2    [description]
	 * @param  [type] $password  [description]
	 * @param  [type] $password2 [description]
	 * @return [type]            [description]
	 */
	protected function registerUser( $name, $email, $email2, $password, $password2 ){

		$message = "";
		/**
		 * Check for spam and last 2 lines to the code
		 */
		
		// SPAM
		if (trim($email2) != '')  return json_encode( [ "message" => "spam"] );
		
		if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    		return json_encode( [ "message" => "El email no es valido"] );
		}

		// el email existe, no se puede volver a registrar
		if(wire('users')->get("email=$email")->id ) { 
			return json_encode( [ "message" => "El usuario ya existe"] );
		}	
		// el nombre de usuario esta ocupado, su usuario será el email sanitized
		if(wire('users')->get("name=$name")->id) { 
			$name = wire('sanitizer')->email($email);
		}


		// no tiene pass -> genera uno al azar
		if($password=="") {
			$chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_-=+;:,.?";
    		$password = substr( str_shuffle( $chars ), 0, 8 );
    		$password2 = $password;
		}
		// las constraseña no coinciden
		if($password!=$password2 )
			return json_encode( [ "message" => "Las contrasenas no coinciden"] );
		
		$pass = $password;
		$u = new User();

		$u->name= wire('sanitizer')->username($name); 
		$u->email = wire('sanitizer')->email($email);
		$u->pass = $pass;
		$u->addRole("guest");
		// $u->addRole("registrado");
		$u->language = wire('languages')->get("default");
		$u->save();

		return json_encode( ["name" => $u->name, "password" => $u->pass, "message" => $message,] );

	}



}


