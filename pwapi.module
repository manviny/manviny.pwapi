<?php



class pwapi extends WireData implements Module {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(

			// The module'ss title, typically a little more descriptive than the class name
			'title' => 'PW and AngularJS', 

			// version number 
			'version' => 0.1, 

			// summary is brief description of what this module is
			'summary' => 'a clean way to use angularjs + API to use PW in javascript',
			
			// Optional URL to more information about the module
			'href' => 'http://processwire.com',

			// singular=true: indicates that only one instance of the module is allowed.
			// This is usually what you want for modules that attach hooks. 
			'singular' => true, 

			// autoload=true: indicates the module should be started with ProcessWire.
			// This is necessary for any modules that attach runtime hooks, otherwise those
			// hooks won't get attached unless some other code calls the module on it's own.
			// Note that autoload modules are almost always also 'singular' (seen above).
			'autoload' => true, 
		
			// Optional font-awesome icon name, minus the 'fa-' part
			'icon' => 'smile-o', 
			);
	}

	/**
	 * Initialize the module
	 *
	 * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
	 * when ProcessWire's API is ready. As a result, this is a good place to attach hooks. 
	 *
	 */
	public function init() {

		    
		
		// registerUser( $name, $email, $email2, $password, $password2 )		comprueba que no sea robot
        $this->addHook('Page::registerUser', $this, 'registerUser');

        $this->addHook('ProcessPageView::pageNotFound', $this, 'webService');   

	}



	public function webService($event) {

		// Check if asking for a web service
        $url = $event->arguments('url');
        if ($url != '/pwapi/') return; //Let pageNotFound() handle it
		header($_SERVER['SERVER_PROTOCOL'] . ' 200 OK', true, 200);

		// Get post Data
		$request = file_get_contents('php://input');
		$getPost = json_decode($request,true);
		$service = $getPost['action'];
		$d = $getPost['data'];

		switch ($service) {

		    // $http.post('http://ip/web-service/', {action: 'getPage', pageId: 1046 })
		    case "prueba":									
				$event->return = $this->prueba($d["prueba"]);
		        break;	

	    	default: echo "el servicio no existe";
		}


	}	


	protected function prueba( $prueba ){

		return $prueba;

	}




